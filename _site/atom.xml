<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Inception</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2018-03-14T13:54:57+08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Pharrell Yang</name>
   <email></email>
 </author>

 
 <entry>
   <title>Legend Never Die</title>
   <link href="http://localhost:4000/2018/03/14/Legend-Never-Die.html"/>
   <updated>2018-03-14T00:00:00+08:00</updated>
   <id>http://localhost:4000/2018/03/14/Legend-Never-Die</id>
   <content type="html">&lt;p&gt;What a sad day in human history. Stephen Hawking, the brightest star in the firmament of science, whose insights shaped modern cosmology and inspired global audiences in the millions, has died at aged 76.&lt;/p&gt;

&lt;p&gt;I felt ashamed that I haven’t finished his famous book, A Brief History of Time, even I’ve got it more than 10 years ago. In memory of what he inspired us, I want to list some of his quotes below. R.I.P, our beloved scientist.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One, remember to look up at the stars and not down at your feet. Two, never give up work. Work gives you meaning and purpose and life is empty without it. Three, if you are lucky enough to find love, remember it is there and don’t throw it away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;My goal is simple. It is a complete understanding of the universe, why it is as it is and why it exists at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the basic rules of the universe is that nothing is perfect. Perfection simply doesn’t exist… Without imperfection, neither you nor I would exist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Although I cannot move and I have to speak through a computer, in my mind I am free.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Try to make sense of what you see and wonder about what makes the universe exist. Be curious. And however difficult life may seem, there is always something you can do and succeed at.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m not afraid of death, but I’m in no hurry to die.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It matters that you don’t just give up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nothing is better than reading and gaining more and more knowledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;One is always a long way from solving a problem until one actually has the answer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thus, in a sense, we are all doomed. even if we stay away from black holes.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Pythonic Thinking</title>
   <link href="http://localhost:4000/2017/01/18/Pythonic-Thinking.html"/>
   <updated>2017-01-18T00:00:00+08:00</updated>
   <id>http://localhost:4000/2017/01/18/Pythonic-Thinking</id>
   <content type="html">&lt;p&gt;Programmers from other languages may not familiar with the word &lt;em&gt;pythonic&lt;/em&gt; and its meaning. Basically, each programming language follows a particular coding style. Over the years, the Python community has come to use the adjective &lt;em&gt;pythonic&lt;/em&gt; to describe the code that follows its own style.&lt;/p&gt;

&lt;p&gt;The first thing that will make your code &lt;em&gt;pythonic&lt;/em&gt; is to follow &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP 8&lt;/a&gt; Style Guide. I will list some rules that I think are most important:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whitespace&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use spaces instead of tabs for indentation.&lt;/li&gt;
  &lt;li&gt;Use four spaces for each level of syntactically significant indenting.&lt;/li&gt;
  &lt;li&gt;Lines should be 79 characters in length or less (There have some discussions that for modern computers which have wider screen would definitely fit more characters in one line. So around 100 should be a reasonable choice).&lt;/li&gt;
  &lt;li&gt;Functions and classes that in a file should be separated by two blank lines&lt;/li&gt;
  &lt;li&gt;Methods in a class should be separated by one blank line.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;No space&lt;/em&gt;&lt;/strong&gt; aorund list indices, function calls or keyword argument assignments&lt;/li&gt;
  &lt;li&gt;Put &lt;strong&gt;&lt;em&gt;only one&lt;/em&gt;&lt;/strong&gt; space before and after variable assignments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Naming&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Functions, variables and attributes should be in &lt;em&gt;lowercase_underscore&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Protected functions and instance attributes should be in &lt;em&gt;_leading_underscore&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Private instance attributes should be in &lt;em&gt;__double_leading_underscore&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Classes and exceptions should be in &lt;em&gt;CapitalizedWord&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Module level constants should be in ALL_CAPS format.&lt;/li&gt;
  &lt;li&gt;Class methods should use &lt;em&gt;cls&lt;/em&gt; as the name of the first parameter (which refers to the class)&lt;/li&gt;
  &lt;li&gt;Instance methods in classes should use &lt;em&gt;self&lt;/em&gt; as the name of the first parameter (which refers to the class)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expressions and Statements&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use inline negation (&lt;code class=&quot;highlighter-rouge&quot;&gt;if x is not y&lt;/code&gt;) instead of negation of positive expressions (&lt;code class=&quot;highlighter-rouge&quot;&gt;if not x is y&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Don’t check for empty values (&lt;code class=&quot;highlighter-rouge&quot;&gt;[] or ''&lt;/code&gt;) by checking their lengh (&lt;code class=&quot;highlighter-rouge&quot;&gt;if len(x) == 0&lt;/code&gt;). Use &lt;code class=&quot;highlighter-rouge&quot;&gt;if not x&lt;/code&gt; and empty values are implicitly evaluated to &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Always put &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; at the top of a file.&lt;/li&gt;
  &lt;li&gt;Always use absolute import instead relative import. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;from bar import foo&lt;/code&gt;, not just &lt;code class=&quot;highlighter-rouge&quot;&gt;import foo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use &lt;strong&gt;Sublime&lt;/strong&gt; as your coding editor, I would recommand using &lt;strong&gt;Anaconda&lt;/strong&gt; to check your coding style. Just open &lt;em&gt;Anaconda User-Settings&lt;/em&gt; and set &lt;code class=&quot;highlighter-rouge&quot;&gt;anaconda_linting&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. You can also ignore some &lt;em&gt;PEP 8&lt;/em&gt; rules by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;pep8_ignore&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
