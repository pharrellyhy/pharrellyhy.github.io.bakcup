<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-11T01:42:29+08:00</updated><id>http://localhost:4000/</id><title type="html">Inception</title><subtitle>Python. Machine Learning. Deep Learning.</subtitle><author><name>Pharrell Yang</name></author><entry><title type="html">This is a test</title><link href="http://localhost:4000/2018/01/01/test.html" rel="alternate" type="text/html" title="This is a test" /><published>2018-01-01T00:00:00+08:00</published><updated>2018-01-01T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/01/test</id><content type="html" xml:base="http://localhost:4000/2018/01/01/test.html">&lt;p&gt;Programmers from other languages may not familiar with the word &lt;em&gt;pythonic&lt;/em&gt; and its meaning. Basically, each programming language follows a particular coding style. Over the years, the Python community has come to use the adjective &lt;em&gt;pythonic&lt;/em&gt; to describe the code that follows its own style.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# comment &lt;/span&gt;
        

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weights'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'biases'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Pharrell Yang</name></author><category term="python" /><category term="machine-learning" /><summary type="html">Programmers from other languages may not familiar with the word pythonic and its meaning. Basically, each programming language follows a particular coding style. Over the years, the Python community has come to use the adjective pythonic to describe the code that follows its own style.</summary></entry><entry><title type="html">Pythonic Thinking</title><link href="http://localhost:4000/2017/01/18/Pythonic-Thinking.html" rel="alternate" type="text/html" title="Pythonic Thinking" /><published>2017-01-18T00:00:00+08:00</published><updated>2017-01-18T00:00:00+08:00</updated><id>http://localhost:4000/2017/01/18/Pythonic-Thinking</id><content type="html" xml:base="http://localhost:4000/2017/01/18/Pythonic-Thinking.html">&lt;p&gt;Programmers from other languages may not familiar with the word &lt;em&gt;pythonic&lt;/em&gt; and its meaning. Basically, each programming language follows a particular coding style. Over the years, the Python community has come to use the adjective &lt;em&gt;pythonic&lt;/em&gt; to describe the code that follows its own style.&lt;/p&gt;

&lt;p&gt;The first thing that will make your code &lt;em&gt;pythonic&lt;/em&gt; is to follow &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP 8&lt;/a&gt; Style Guide. I will list some rules that I think are most important:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whitespace&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use spaces instead of tabs for indentation.&lt;/li&gt;
  &lt;li&gt;Use four spaces for each level of syntactically significant indenting.&lt;/li&gt;
  &lt;li&gt;Lines should be 79 characters in length or less (There have some discussions that for modern computers which have wider screen would definitely fit more characters in one line. So around 100 should be a reasonable choice).&lt;/li&gt;
  &lt;li&gt;Functions and classes that in a file should be separated by two blank lines&lt;/li&gt;
  &lt;li&gt;Methods in a class should be separated by one blank line.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;No space&lt;/em&gt;&lt;/strong&gt; aorund list indices, function calls or keyword argument assignments&lt;/li&gt;
  &lt;li&gt;Put &lt;strong&gt;&lt;em&gt;only one&lt;/em&gt;&lt;/strong&gt; space before and after variable assignments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Naming&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Functions, variables and attributes should be in &lt;em&gt;lowercase_underscore&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Protected functions and instance attributes should be in &lt;em&gt;_leading_underscore&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Private instance attributes should be in &lt;em&gt;__double_leading_underscore&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Classes and exceptions should be in &lt;em&gt;CapitalizedWord&lt;/em&gt; format.&lt;/li&gt;
  &lt;li&gt;Module level constants should be in ALL_CAPS format.&lt;/li&gt;
  &lt;li&gt;Class methods should use &lt;em&gt;cls&lt;/em&gt; as the name of the first parameter (which refers to the class)&lt;/li&gt;
  &lt;li&gt;Instance methods in classes should use &lt;em&gt;self&lt;/em&gt; as the name of the first parameter (which refers to the class)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expressions and Statements&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use inline negation (&lt;code class=&quot;highlighter-rouge&quot;&gt;if x is not y&lt;/code&gt;) instead of negation of positive expressions (&lt;code class=&quot;highlighter-rouge&quot;&gt;if not x is y&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Donâ€™t check for empty values (&lt;code class=&quot;highlighter-rouge&quot;&gt;[] or ''&lt;/code&gt;) by checking their lengh (&lt;code class=&quot;highlighter-rouge&quot;&gt;if len(x) == 0&lt;/code&gt;). Use &lt;code class=&quot;highlighter-rouge&quot;&gt;if not x&lt;/code&gt; and empty values are implicitly evaluated to &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Always put &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; at the top of a file.&lt;/li&gt;
  &lt;li&gt;Always use absolute import instead relative import. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;from bar import foo&lt;/code&gt;, not just &lt;code class=&quot;highlighter-rouge&quot;&gt;import foo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use &lt;strong&gt;Sublime&lt;/strong&gt; as your coding editor, I would recommand using &lt;strong&gt;Anaconda&lt;/strong&gt; to check your coding style. Just open &lt;em&gt;Anaconda User-Settings&lt;/em&gt; and set &lt;code class=&quot;highlighter-rouge&quot;&gt;anaconda_linting&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. You can also ignore some &lt;em&gt;PEP 8&lt;/em&gt; rules by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;pep8_ignore&lt;/code&gt;.&lt;/p&gt;</content><author><name>Pharrell Yang</name></author><category term="python" /><summary type="html">Programmers from other languages may not familiar with the word pythonic and its meaning. Basically, each programming language follows a particular coding style. Over the years, the Python community has come to use the adjective pythonic to describe the code that follows its own style.</summary></entry></feed>